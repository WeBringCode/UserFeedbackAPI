{
  "openapi": "3.0.1",
  "info": {
    "title": "UserRating API",
    "description": "This is the main API for the user rating data collection.",
    "version": "v1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "paths": {
    "/redis/set": {
      "post": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "set",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/rating/create": {
      "post": {
        "tags": [
          "Rating controller"
        ],
        "summary": "On user data UI component presentation send an impression",
        "description": "Given that the client has has presented the user data UI component, we expect the component to send an impression. Upon successful transmission of the impression, the client will receive a 200 OK response and a Context ID to be used for rating call.",
        "operationId": "impression",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RatingForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully sent the impression",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RatingDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError"
                }
              }
            }
          }
        }
      }
    },
    "/organisation/unregister": {
      "post": {
        "tags": [
          "Organisation controller"
        ],
        "summary": "Un-register your organisation via the API",
        "description": "Given an access token coming from the associated organisation's domain this endpoint will remove the organisation's access from the API but re-format the organisations data references to retain the user feedback data",
        "operationId": "unregister",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnRegisterForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Under construction string returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomResponse"
                }
              }
            }
          }
        }
      }
    },
    "/organisation/register": {
      "post": {
        "tags": [
          "Organisation controller"
        ],
        "summary": "Register your organisation and receive an access token for the API",
        "description": "Given a unique organisation name and a list of unique domain names from which your service(s) is served from, this endpoint returns an access token to be used when client plugin is interacting with the API",
        "operationId": "register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successfully retrieved an access token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiKeyDTO"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictResponse"
                }
              }
            }
          }
        }
      }
    },
    "/impression/create": {
      "post": {
        "tags": [
          "Impression controller"
        ],
        "summary": "On user data UI component presentation send an impression",
        "description": "Given that the client has presented the user data UI component, we expect the component to send an impression. Upon successful transmission of the impression, the client will receive a 200 OK response and a Context ID to be used for rating call.",
        "operationId": "impression_1",
        "parameters": [
          {
            "name": "X-API-KEY",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImpressionForm"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully sent the impression",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImpressionDTO"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ForbiddenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/cleardb": {
      "post": {
        "tags": [
          "Admin controller"
        ],
        "summary": "Clear all data",
        "description": "Given access upon invocation this endpoint will clear all data in the database",
        "operationId": "clearDb",
        "responses": {
          "200": {
            "description": "All data has been cleared from the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomResponse"
                }
              }
            }
          }
        }
      }
    },
    "/redis/keys": {
      "get": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "keys",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/redis/keycount": {
      "get": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "keyCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/redis/get": {
      "get": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "get",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/": {
      "get": {
        "tags": [
          "Base controller - Collect user ratings for a given organisations services and at certain points of the user's journey."
        ],
        "summary": "Base path for the API",
        "description": "Returns a welcome message from the API",
        "operationId": "welcome",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/redis/delete": {
      "delete": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "delete",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/redis/delete/all": {
      "delete": {
        "tags": [
          "Redis controller"
        ],
        "operationId": "delete_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RedisForm": {
        "required": [
          "key",
          "value"
        ],
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "RatingForm": {
        "required": [
          "fingerprint",
          "impressionId",
          "score"
        ],
        "type": "object",
        "properties": {
          "impressionId": {
            "type": "integer",
            "format": "int64"
          },
          "fingerprint": {
            "type": "string"
          },
          "score": {
            "maximum": 5,
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RatingDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "contextId": {
            "type": "integer",
            "format": "int64"
          },
          "impressionId": {
            "type": "integer",
            "format": "int64"
          },
          "fingerprint": {
            "type": "string"
          },
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "100 CONTINUE",
              "101 SWITCHING_PROTOCOLS",
              "102 PROCESSING",
              "103 CHECKPOINT",
              "200 OK",
              "201 CREATED",
              "202 ACCEPTED",
              "203 NON_AUTHORITATIVE_INFORMATION",
              "204 NO_CONTENT",
              "205 RESET_CONTENT",
              "206 PARTIAL_CONTENT",
              "207 MULTI_STATUS",
              "208 ALREADY_REPORTED",
              "226 IM_USED",
              "300 MULTIPLE_CHOICES",
              "301 MOVED_PERMANENTLY",
              "302 FOUND",
              "302 MOVED_TEMPORARILY",
              "303 SEE_OTHER",
              "304 NOT_MODIFIED",
              "305 USE_PROXY",
              "307 TEMPORARY_REDIRECT",
              "308 PERMANENT_REDIRECT",
              "400 BAD_REQUEST",
              "401 UNAUTHORIZED",
              "402 PAYMENT_REQUIRED",
              "403 FORBIDDEN",
              "404 NOT_FOUND",
              "405 METHOD_NOT_ALLOWED",
              "406 NOT_ACCEPTABLE",
              "407 PROXY_AUTHENTICATION_REQUIRED",
              "408 REQUEST_TIMEOUT",
              "409 CONFLICT",
              "410 GONE",
              "411 LENGTH_REQUIRED",
              "412 PRECONDITION_FAILED",
              "413 PAYLOAD_TOO_LARGE",
              "413 REQUEST_ENTITY_TOO_LARGE",
              "414 URI_TOO_LONG",
              "414 REQUEST_URI_TOO_LONG",
              "415 UNSUPPORTED_MEDIA_TYPE",
              "416 REQUESTED_RANGE_NOT_SATISFIABLE",
              "417 EXPECTATION_FAILED",
              "418 I_AM_A_TEAPOT",
              "419 INSUFFICIENT_SPACE_ON_RESOURCE",
              "420 METHOD_FAILURE",
              "421 DESTINATION_LOCKED",
              "422 UNPROCESSABLE_ENTITY",
              "423 LOCKED",
              "424 FAILED_DEPENDENCY",
              "425 TOO_EARLY",
              "426 UPGRADE_REQUIRED",
              "428 PRECONDITION_REQUIRED",
              "429 TOO_MANY_REQUESTS",
              "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
              "451 UNAVAILABLE_FOR_LEGAL_REASONS",
              "500 INTERNAL_SERVER_ERROR",
              "501 NOT_IMPLEMENTED",
              "502 BAD_GATEWAY",
              "503 SERVICE_UNAVAILABLE",
              "504 GATEWAY_TIMEOUT",
              "505 HTTP_VERSION_NOT_SUPPORTED",
              "506 VARIANT_ALSO_NEGOTIATES",
              "507 INSUFFICIENT_STORAGE",
              "508 LOOP_DETECTED",
              "509 BANDWIDTH_LIMIT_EXCEEDED",
              "510 NOT_EXTENDED",
              "511 NETWORK_AUTHENTICATION_REQUIRED"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "debugMessage": {
            "type": "string"
          },
          "subErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubError"
            }
          }
        }
      },
      "ApiSubError": {
        "type": "object"
      },
      "UnRegisterForm": {
        "required": [
          "accessToken"
        ],
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          }
        }
      },
      "CustomResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "RegisterForm": {
        "required": [
          "domainList",
          "organisationName"
        ],
        "type": "object",
        "properties": {
          "organisationName": {
            "type": "string"
          },
          "domainList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "BAD_REQUEST"
          },
          "timestamp": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "message": {
            "type": "string"
          },
          "debugMessage": {
            "type": "string"
          },
          "subErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubError"
            }
          }
        }
      },
      "ApiKeyDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "organisationId": {
            "type": "integer",
            "format": "int64"
          },
          "apiKey": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ConflictResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "CONFLICT"
          },
          "timestamp": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "message": {
            "type": "string"
          },
          "debugMessage": {
            "type": "string"
          },
          "subErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubError"
            }
          }
        }
      },
      "ImpressionForm": {
        "required": [
          "domain",
          "fingerprint",
          "name",
          "path"
        ],
        "type": "object",
        "properties": {
          "fingerprint": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "htmlId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ImpressionDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "contextId": {
            "type": "integer",
            "format": "int64"
          },
          "fingerprint": {
            "type": "string"
          },
          "avgRating": {
            "type": "number"
          },
          "ratingCount": {
            "type": "integer",
            "format": "int32"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ForbiddenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "FORBIDDEN"
          },
          "timestamp": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "message": {
            "type": "string"
          },
          "debugMessage": {
            "type": "string"
          },
          "subErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiSubError"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKey": {
        "type": "apiKey",
        "description": "API key for the organisation. <br /><br />**Please note:** that the API key needs to be inserted manually in the requests when utilizing the Swagger UI.<br /><br />",
        "name": "X-API-KEY",
        "in": "header"
      }
    }
  }
}